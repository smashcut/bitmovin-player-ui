{
  "manifest": {
    "name": "bitmovin-player-ui",
    "version": "2.11.2",
    "description": "Bitmovin Player UI Framework",
    "main": "dist/js/framework/main.js",
    "scripts": {
      "build": "gulp build",
      "lint": "gulp lint",
      "serve": "gulp serve",
      "start": "npm serve",
      "test": "echo \"Error: no test specified\" && exit 1",
      "prepublish": "gulp npm-prepare",
      "watch": "gulp watch"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/bitmovin/bitmovin-player-ui.git"
    },
    "author": {
      "name": "Bitmovin"
    },
    "license": "LGPL-3.0",
    "bugs": {
      "url": "https://github.com/bitmovin/bitmovin-player-ui/issues"
    },
    "homepage": "https://github.com/bitmovin/bitmovin-player-ui#readme",
    "devDependencies": {
      "autoprefixer": "^6.5.2",
      "browser-sync": "^2.18.13",
      "browserify": "^13.1.1",
      "cssnano": "^3.8.0",
      "del": "^2.2.2",
      "gulp": "^3.9.1",
      "gulp-css-base64": "^1.3.4",
      "gulp-if": "^2.0.2",
      "gulp-postcss": "^6.2.0",
      "gulp-rename": "^1.2.2",
      "gulp-replace": "^0.6.1",
      "gulp-sass": "^3.1.0",
      "gulp-sass-lint": "^1.3.4",
      "gulp-sourcemaps": "^2.6.1",
      "gulp-tslint": "^8.1.2",
      "gulp-typescript": "^3.2.3",
      "gulp-uglify": "^2.0.0",
      "merge2": "^1.2.0",
      "minimist": "^1.2.0",
      "postcss-svg": "^1.0.6",
      "run-sequence": "^1.2.2",
      "stream-combiner2": "^1.1.1",
      "tsify": "^2.0.2",
      "tslint": "^5.8.0",
      "typescript": "^2.6.2",
      "vinyl-buffer": "^1.0.0",
      "vinyl-source-stream": "^1.1.0",
      "watchify": "^3.7.0"
    },
    "_registry": "npm",
    "_loc": "/Users/rudi/Library/Caches/Yarn/v4/npm-bitmovin-player-ui-2.11.2-548a305c-8f0e-4c9a-a7df-8a40d15c58c7-1565810916522/node_modules/bitmovin-player-ui/package.json",
    "readmeFilename": "README.md",
    "readme": "# Bitmovin Player UI [![npm version](https://badge.fury.io/js/bitmovin-player-ui.svg)](https://badge.fury.io/js/bitmovin-player-ui) [![Build Status](https://travis-ci.org/bitmovin/bitmovin-player-ui.svg?branch=master)](https://travis-ci.org/bitmovin/bitmovin-player-ui)\nThe Bitmovin Adaptive Streaming Player UI\n\nRead more about the usage, as well as other important information on Bitmovin's Adaptive Streaming Player itself at https://bitmovin.com/ and https://bitmovin.com/player-documentation/.\n\n## Installation\n\nBeside the Git repository, the UI framework is also available through the following distribution channels:\n\n### CDN\n\nThe UI framework and default skin bundled with the latest player release are always available via CDN. This is the recommended way if you just want to work with the predefined UI components. All components will be available in the `bitmovin.playerui` namespace.\n\n * JavaScript library: `//bitmovin-a.akamaihd.net/bitmovin-player/stable/7/bitmovinplayer-ui.js` \n * CSS default skin: `//bitmovin-a.akamaihd.net/bitmovin-player/stable/7/bitmovinplayer-ui.css`\n\n### NPM\n\nThe UI framework is also available in the NPM repository and comes with all source and distributable files, JavaScript modules and TypeScript type definitions.\n\n * `npm install bitmovin-player-ui`\n\n\n## Getting Started with Development\n\n 0. Clone Git repository\n 1. Install node.js\n 2. Install Gulp: `npm install --global gulp-cli`\n 3. Install required npm packages: `npm install`\n 4. Run Gulp tasks (`gulp --tasks`)\n  * `gulp` to build project into `dist` directory\n  * `gulp watch` to develop and rebuild changed files automatically\n  * `gulp serve` to open test page in browser, build and reload changed files automatically\n  * `gulp lint` to lint TypeScript and SASS files\n  * `gulp build-prod` to build project with minified files into `dist` directory\n  \nTo just take a look at the project, also run `gulp serve`. For changes, check our [CHANGELOG](CHANGELOG.md).\n\n## Contributing\n\nPull requests are welcome! Please check the [contribution guidelines](CONTRIBUTING.md).\n\n## Introduction\n\nThis repository contains the Bitmovin Player UI framework introduced with the 7.0 release. \nIt is designed as a flexible and modularized layer on the player API that replaces the old integrated monolithic UI, enabling customers and users of the player to easily customize the UI to their needs in design, structure, and functionality. It makes it extremely easy and straightforward to add additional control components and we encourage our users to proactively contribute to our codebase.\n\nThe framework basically consists of a `UIManager` that handles initialization and destruction of the UI, and components extending the `Component` base class. Components provide specific functionality (e.g. `PlaybackToggleButton`, `ControlBar`, `SeekBar`, `SubtitleOverlay`) and usually consist of two files, a TypeScript `.ts` file containing control code and API interaction with the player, and a SASS `.scss` file containing the visual style.\n\nA UI is defined by a tree of components, making up the UI *structure*, and their visuals styles, making up the UI *skin*. The root of the structure always starts with a `UIContainer` (or a subclass, e.g. `CastUIContainer`), which is a subclass of `Container` and can contain other components, like any other components extending this class (usually layout components, e.g. `ControlBar`). Components that do not extend the `Container` cannot contain other components and therefore make up the leaves of the UI tree.\n\n## Customizing the UI\n\nThere are basically three approaches to customize the UI:\n\n1. Go with the built-in UI of the player and adjust the styling to your liking with CSS\n2. Keep the player managing the UI internally but tell it to load alternative UI CSS/JS files, e.g. your own build from this repository\n3. Deactivate the built-in UI and manage your own UI instance externally, e.g. your own build from this repository\n\n### Styling the built-in UI\n\nWhen using the built-in UI, you can style it to your linking with CSS by overwriting our default styles, as documented in our [CSS Class Reference](https://bitmovin.com/player-documentation/css-class-reference/).\n\n### Replacing the built-in UI\n\n#### Internally managed by the player\n\nIt is possible to override which `js` and `css` files the player loads for its internal UI with the `ui` and `ui_css` properties in the `location` section of the player configuration. This is a simple way to supply a customized UI without the overhead of managing an external UI instance, and especially helpful for supplying a custom script which otherwise cannot be overridden like the CSS styles can. The paths to the `ui` (`js`) and `ui_css` (obviously `css`) files can be absolute or relative. Both are optional and do not need to be specified together.\n\nThe player constructs its internal UI instance from the `UIManager.Factory.buildDefaultUI(player)` factory method, so this entry point must exist for this approach to work. The base class of the UI skin (e.g. the default `bmpui-ui-skin-modern`) must also match between the JS and CSS.\n\n```js\nvar config = {\n    ...,\n    source: {\n      ...\n    },\n    location: {\n        ui: '//domain.tld/path/to/bitmovinplayer-ui.js',\n        ui_css: 'styles/bitmovinplayer-ui.css',\n    }\n};\n\nbitmovin.player('player-id').setup(config).then(function (player) {\n  // player successfully loaded\n});\n```\n\n#### Externally managed\n\nTo use the player with an external custom UI instance, you need to deactivate the built-in UI (set `ux: false`), include the necessary `js` and `css` files into your HTML and create and attach your own UI instance with the `UIManager`.\n\n * Deactivate the built-in UI by setting `ux: false` in the `style` config of the player ([Player Configuration Guide](https://bitmovin.com/player-documentation/player-configuration/))\n * Build the UI framework (e.g. `gulp build-prod`) and include `bitmovinplayer-ui.min.js` and `bitmovinplayer-ui.min.css` (or their non-minified counterparts) from the `dist` directory\n * Create your own UI instance with the `UIManager.Factory` once the player is loaded (or [load a custom UI structure](#building-a-custom-ui-structure))\n\n```js\nvar config = {\n    ...,\n    source: {\n      ...\n    },\n    style: {\n        ux: false // disable the built-in UI\n    }\n};\n\nbitmovin.player('player-id').setup(config).then(function (player) {\n  var myUiManager = bitmovin.playerui.UIManager.Factory.buildDefaultUI(player);\n});\n```\n\n### Building a custom UI structure\n\nInstead of using predefined UI structures from the `UIManager.Factory`, you can easily create a custom structure. For examples on how to create such UI structures, take a look at the `UIManager.Factory`.\n\nA simple example on how to create a custom UI with our default skin that only contains a playback toggle overlay (an overlay with a large playback toggle button) looks as follows:\n\n```js\n// Definition of the UI structure\nvar mySimpleUi = new bitmovin.playerui.UIContainer({\n  components: [\n    new bitmovin.playerui.PlaybackToggleOverlay()\n  ],\n  cssClasses: ['ui-skin-modern']\n});\n\nbitmovin.player('player-id').setup(config).then(function (player) {\n  // Add the UI to the player\n  var myUiManager = new bitmovin.playerui.UIManager(player, mySimpleUi);\n});\n```\n\n### UIManager\n\nThe `UIManager` manages UI instances and is used to add and remove UIs to/from the player. To add a UI to the player, construct a new instance and pass the `player` object, a UI structure (`UIContainer`) or a list of UI structures with conditions (`UIVariant[]`), and an optional configuration object. To remove a UI from the player, just call `release()` on your UIManager instance.\n\n```js\n// Add UI (e.g. at player initialization)\nvar myUiManager = new bitmovin.playerui.UIManager(player, mySimpleUI);\n\n// Remove UI (e.g. at player destruction)\nmyUiManager.release();\n```\n\nUIs can be added and removed anytime during the player's lifecycle, which means UIs can be dynamically adjusted to the player, e.g. by listening to events. It is also perfectly possible to manage multiple UIs in parallel.\n\nHere is an example on how to display a special UI in fullscreen mode:\n\n```js\nbitmovin.player('player-id').setup(config).then(function (player) {\n  var myUiManager = new bitmovin.playerui.UIManager(player, myWindowUi);\n  \n  player.addEventHandler(player.EVENT.ON_FULLSCREEN_ENTER, function () {\n    myUiManager.release();\n    myUiManager = new bitmovin.playerui.UIManager(player, myFullscreenUi);\n  });\n  \n  player.addEventHandler(player.EVENT.ON_FULLSCREEN_EXIT, function () {\n    myUiManager.release();\n    myUiManager = new bitmovin.playerui.UIManager(player, myWindowUi);\n  });\n});\n```\n\nAlternatively, you can let the `UIManager` handle switching between different UIs by passing in multiple `UIVariant`s:\n\n```js\nbitmovin.player('player-id').setup(config).then(function (player) {\n  var myUiManager = new bitmovin.playerui.UIManager(player, [{\n    // Display my fullscreen UI under the condition that the player is in fullscreen mode\n    ui: myFullscreenUi,\n    condition: function(context) {\n      return context.isFullscreen;\n    }\n  }, {\n    // Display my window UI in all other cases\n    ui: myWindowUi\n  }]);\n});\n```\n\nThere are various conditions upon which the `UIManager` can automatically switch between different UIs, e.g. ad playback and player size.\n\n#### Factory\n\n`UIManager.Factory` provides a few predefined UI structures and styles, e.g.:\n\n * `buildDefaultUI`: The default UI as used by the player by default\n * `buildDefaultCastReceiverUI`: A light UI specifically for Google Cast receivers\n * `buildDefaultSmallScreenUI`: A light UI specifically for small handheld devices\n * `buildLegacyUI`: ported legacy UI style from player <= version 6\n\nYou can easily test and switch between these UIs in the UI playground.\n\n### Components\n\nFor the list of available components check the `src/ts/components` directory. Each component extends the `Component` base class and adds its own configuration interface and functionality. Components that can container other components as child elements extend the `Container` component. Components are associated to their CSS styles by the `cssClass` config property (prefixed by the `cssPrefix` config property and the `$prefix` SCSS variable).\n\nCustom components can be easily written by extending any existing component, depending on the required functionality.\n\n#### Component Configuration\n\nAll components can be directly configured with an optional configuration object that is the first and only parameter of the constructor and defined by an interface. Each component is either accompanied by its own configuration interface (defined in the same `.ts` file and named with the suffix `Config`, e.g. `LabelConfig` for a `Label`), or inherits the configuration interface from its superclass.\n\nThere is currently no way to change these configuration values on an existing UI instance, thus they must be passed directly when creating a custom UI structure.\n\nThe following example creates a very basic UI structure with only two text labels:\n\n```js\nvar myUi = new bitmovin.playerui.UIContainer({\n  components: [\n    new bitmovin.playerui.Label({ text: \"A label\" }),\n    new bitmovin.playerui.Label({ text: \"A hidden label\", hidden: true })\n  ],\n  cssClasses: ['ui-skin-modern']\n});\n```\n\nThe `UIContainer` is configures with two options, the `components`, an array containing child components, and `cssClasses`, an array with CSS classes to be set on the container. The labels are configures with some `text`, and one label is initially hidden by setting the `hidden` option.\n\n### UI Configuration\n\nThe `UIManager` takes an optional global configuration object that can be used to configure certain content on the UI.\n\n```js\nvar myUiConfig = {\n  metadata: {\n    title: 'Video title',\n    description: 'Video description...'\n  },\n  recommendations: [\n    {title: 'Recommendation 1: The best video ever', url: 'http://bitmovin.com', thumbnail: 'http://placehold.it/300x300', duration: 10.4},\n    {title: 'Recommendation 2: The second best video', url: 'http://bitmovin.com', thumbnail: 'http://placehold.it/300x300', duration: 64},\n    {title: 'Recommendation 3: The third best video of all time', url: 'http://bitmovin.com', thumbnail: 'http://placehold.it/300x300', duration: 195}\n  ]\n};\n\nvar myUiManager = new bitmovin.playerui.UIManager(player, myUi, myUiConfig);\n```\n\nAll of the configuration properties are optional. If `metadata` is set, it overwrites the metadata of the player configuration. If `recommendations` is set, a list of recommendations is shown in the `RecommendationOverlay` at the end of playback. For this to work, the UI must contain a `RecommendationOverlay`, like the default player UI does.\n\n### UI Playground\n\nThe UI playground can be launched with `gulp serve` and opens a page in a local browser window. On this page, you can switch between different sources and UI styles, trigger API actions and observe events.\n\nThis page uses BrowserSync to sync the state across multiple tabs and browsers and recompiles and reloads automatically files automatically when any `.scss` or `.ts` files are modified. It makes a helpful tool for developing and testing the UI.\n",
    "licenseText": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
  },
  "artifacts": [],
  "remote": {
    "type": "copy",
    "registry": "npm",
    "hash": "74efa3a1-e5e9-4cea-b73a-458c22891bb9-1565949100965",
    "reference": "/usr/local/lib/node_modules/bitmovin-player-ui"
  },
  "registry": "npm",
  "hash": "74efa3a1-e5e9-4cea-b73a-458c22891bb9-1565949100965"
}